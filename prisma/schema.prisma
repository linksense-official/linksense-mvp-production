generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  ext_expires_in    Int? 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  password              String?
  company               String?
  role                  String    @default("user")
  emailVerified         DateTime?
  image                 String?
  
  // セキュリティ機能フィールド
  twoFactorEnabled      Boolean   @default(false)
  twoFactorSecret       String?
  backupCodes           String?   // JSON配列として保存
  lastLoginAt           DateTime?
  lastLoginIp           String?
  lastLoginMetadata     String?   // JSON形式のメタデータ
  loginAttempts         Int       @default(0)
  lockedUntil           DateTime?
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  accounts              Account[]
  sessions              Session[]
  integrations          Integration[]
  subscription          Subscription?
  passwordResetTokens   PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  loginHistory          LoginHistory[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// メール認証トークン
model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("email_verification_tokens")
}

// パスワードリセットトークン
model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_reset_tokens")
}

// ログイン履歴
model LoginHistory {
  id        String   @id @default(cuid())
  userId    String
  ipAddress String
  userAgent String?
  success   Boolean
  reason    String?  // 失敗理由
  metadata  String?  // JSON形式のメタデータ
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("login_history")
}

model Integration {
  id           String   @id @default(cuid())
  userId       String
  service      String
  accessToken  String
  refreshToken String?
  teamId       String?
  teamName     String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, service])
  @@map("integrations")
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  stripePriceId    String
  status           String
  currentPeriodEnd DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}