'use client';

import { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';

// „Éó„É©„É≥ÂûãÂÆöÁæ©
interface Plan {
  id: string;
  name: string;
  price: number;
  yearlyPrice: number;
  description: string;
  features: string[];
  limits: {
    members: number | string;
    teams: number | string;
    reports: number;
    storage: string;
  };
  popular?: boolean;
  enterprise?: boolean;
  color: string;
  icon: string;
  detailedFeatures: {
    category: string;
    items: string[];
  }[];
  useCases: string[];
  support: string;
}

// ÈÄöÁü•Áä∂ÊÖãÂûãÂÆöÁæ©
interface NotificationState {
  show: boolean;
  message: string;
  type: 'success' | 'info' | 'warning' | 'error';
}

// „Éó„É©„É≥„Éá„Éº„ÇøÔºàË©≥Á¥∞ÊÉÖÂ†±ËøΩÂä†Ôºâ
const plans: Plan[] = [
  {
    id: 'starter',
    name: '„Çπ„Çø„Éº„Çø„Éº',
    price: 0,
    yearlyPrice: 0,
    description: 'Â∞èË¶èÊ®°„ÉÅ„Éº„É†Âêë„Åë„ÅÆÂü∫Êú¨Ê©üËÉΩ',
    features: [
      'Âü∫Êú¨ÁöÑ„Å™ÂÅ•ÂÖ®ÊÄßÂàÜÊûê',
      'ÈÄ±Ê¨°„É¨„Éù„Éº„Éà',
      '„É°„Éº„É´ÈÄöÁü•',
      'Âü∫Êú¨„Çµ„Éù„Éº„Éà',
      '„Éá„Éº„Çø‰øùÊåÅ 30Êó•',
      'Âü∫Êú¨ÁöÑ„Å™„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ'
    ],
    limits: {
      members: 5,
      teams: 1,
      reports: 4,
      storage: '1GB'
    },
    color: 'gray',
    icon: 'üöÄ',
    detailedFeatures: [
      {
        category: 'ÂàÜÊûêÊ©üËÉΩ',
        items: ['Âü∫Êú¨ÁöÑ„Å™ÂÅ•ÂÖ®ÊÄß„Çπ„Ç≥„Ç¢', '„ÉÅ„Éº„É†Ê¶ÇË¶Å„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ', 'Âü∫Êú¨„É°„Éà„É™„ÇØ„ÇπË°®Á§∫']
      },
      {
        category: '„É¨„Éù„Éº„Éà',
        items: ['ÈÄ±Ê¨°„Çµ„Éû„É™„Éº„É¨„Éù„Éº„Éà', 'PDFÂá∫Âäõ', '„É°„Éº„É´ÈÖç‰ø°']
      },
      {
        category: '„Çµ„Éù„Éº„Éà',
        items: ['„É°„Éº„É´„Çµ„Éù„Éº„Éà', '„Éò„É´„Éó„Éâ„Ç≠„É•„É°„É≥„Éà', '„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Éï„Ç©„Éº„É©„É†']
      }
    ],
    useCases: [
      '5‰∫∫‰ª•‰∏ã„ÅÆÂ∞èË¶èÊ®°„ÉÅ„Éº„É†',
      '„Çπ„Çø„Éº„Éà„Ç¢„ÉÉ„Éó‰ºÅÊ•≠',
      '„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÉÅ„Éº„É†',
      '„Éï„É™„Éº„É©„É≥„Çπ„Ç∞„É´„Éº„Éó'
    ],
    support: '„É°„Éº„É´„Çµ„Éù„Éº„ÉàÔºà48ÊôÇÈñì‰ª•ÂÜÖËøî‰ø°Ôºâ'
  },
  {
    id: 'professional',
    name: '„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´',
    price: 2980,
    yearlyPrice: 29800,
    description: 'ÊàêÈï∑‰ºÅÊ•≠Âêë„Åë„ÅÆÈ´òÂ∫¶„Å™ÂàÜÊûêÊ©üËÉΩ',
    features: [
      'È´òÂ∫¶„Å™ÂÅ•ÂÖ®ÊÄßÂàÜÊûê',
      '„É™„Ç¢„É´„Çø„Ç§„É†ÂàÜÊûê',
      'Êó•Ê¨°„É¨„Éù„Éº„Éà',
      '„Ç´„Çπ„Çø„É†„Ç¢„É©„Éº„Éà',
      '„Éá„Éº„Çø‰øùÊåÅ 1Âπ¥',
      'È´òÂ∫¶„Å™„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ',
      '„ÉÅ„Éº„É†ÊØîËºÉÂàÜÊûê',
      'API „Ç¢„ÇØ„Çª„Çπ',
      'ÂÑ™ÂÖà„Çµ„Éù„Éº„Éà'
    ],
    limits: {
      members: 50,
      teams: 10,
      reports: 50,
      storage: '10GB'
    },
    popular: true,
    color: 'blue',
    icon: '‚≠ê',
    detailedFeatures: [
      {
        category: 'È´òÂ∫¶„Å™ÂàÜÊûê',
        items: ['„É™„Ç¢„É´„Çø„Ç§„É†ÂÅ•ÂÖ®ÊÄßÁõ£Ë¶ñ', '‰∫àÊ∏¨ÂàÜÊûê', '„Éà„É¨„É≥„ÉâÂàÜÊûê', '„ÉÅ„Éº„É†ÊØîËºÉ', '„Ç´„Çπ„Çø„É†„É°„Éà„É™„ÇØ„Çπ']
      },
      {
        category: '„É¨„Éù„Éº„Éà & „Ç¢„É©„Éº„Éà',
        items: ['Êó•Ê¨°/ÈÄ±Ê¨°/ÊúàÊ¨°„É¨„Éù„Éº„Éà', '„Ç´„Çπ„Çø„É†„É¨„Éù„Éº„Éà', '„É™„Ç¢„É´„Çø„Ç§„É†„Ç¢„É©„Éº„Éà', 'Slack/TeamsÁµ±Âêà']
      },
      {
        category: 'API & Áµ±Âêà',
        items: ['REST API', 'Webhook', 'SlackÁµ±Âêà', 'TeamsÁµ±Âêà', 'JiraÁµ±Âêà']
      },
      {
        category: '„Çµ„Éù„Éº„Éà',
        items: ['ÂÑ™ÂÖà„É°„Éº„É´„Çµ„Éù„Éº„Éà', '„ÉÅ„É£„ÉÉ„Éà„Çµ„Éù„Éº„Éà', '„Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞ÊîØÊè¥']
      }
    ],
    useCases: [
      '10-50‰∫∫„ÅÆÊàêÈï∑‰ºÅÊ•≠',
      'Ë§áÊï∞„ÉÅ„Éº„É†„ÇíÊåÅ„Å§ÁµÑÁπî',
      '„É™„É¢„Éº„Éà„ÉØ„Éº„ÇØ‰∏≠ÂøÉ‰ºÅÊ•≠',
      '„Ç¢„Ç∏„É£„Ç§„É´ÈñãÁô∫„ÉÅ„Éº„É†'
    ],
    support: 'ÂÑ™ÂÖà„Çµ„Éù„Éº„ÉàÔºà12ÊôÇÈñì‰ª•ÂÜÖËøî‰ø°Ôºâ+ „ÉÅ„É£„ÉÉ„Éà„Çµ„Éù„Éº„Éà'
  },
  {
    id: 'enterprise',
    name: '„Ç®„É≥„Çø„Éº„Éó„É©„Ç§„Ç∫',
    price: 9980,
    yearlyPrice: 99800,
    description: 'Â§ß‰ºÅÊ•≠Âêë„Åë„ÅÆÂåÖÊã¨ÁöÑ„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥',
    features: [
      '„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„ÅÆÂÖ®Ê©üËÉΩ',
      'AI‰∫àÊ∏¨ÂàÜÊûê',
      '„Ç´„Çπ„Çø„É†„É¨„Éù„Éº„Éà',
      'SSOÁµ±Âêà',
      '„Éá„Éº„Çø‰øùÊåÅ ÁÑ°Âà∂Èôê',
      'Â∞ÇÁî®„Çµ„Éù„Éº„Éà',
      '„Ç™„É≥„Çµ„Ç§„ÉàÁ†î‰øÆ',
      '„Ç´„Çπ„Çø„É†Áµ±Âêà',
      '„Çª„Ç≠„É•„É™„ÉÜ„Ç£Áõ£Êüª',
      'SLA‰øùË®º'
    ],
    limits: {
      members: 'ÁÑ°Âà∂Èôê',
      teams: 'ÁÑ°Âà∂Èôê',
      reports: 500,
      storage: 'ÁÑ°Âà∂Èôê'
    },
    enterprise: true,
    color: 'purple',
    icon: 'üëë',
    detailedFeatures: [
      {
        category: 'AI & Ê©üÊ¢∞Â≠¶Áøí',
        items: ['AI‰∫àÊ∏¨ÂàÜÊûê', 'Áï∞Â∏∏Ê§úÁü•', 'Ëá™Âãï„É¨„Ç≥„É°„É≥„Éá„Éº„Ç∑„Éß„É≥', 'ÊÑüÊÉÖÂàÜÊûê', '„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ‰∫àÊ∏¨']
      },
      {
        category: '„Ç®„É≥„Çø„Éº„Éó„É©„Ç§„Ç∫Ê©üËÉΩ',
        items: ['SSOÁµ±ÂêàÔºàSAML/LDAPÔºâ', '„Ç´„Çπ„Çø„É†„Éñ„É©„É≥„Éá„Ç£„É≥„Ç∞', 'Â∞ÇÁî®„Ç§„É≥„Çπ„Çø„É≥„Çπ', 'APIÂà∂Èôê„Å™„Åó']
      },
      {
        category: '„Çª„Ç≠„É•„É™„ÉÜ„Ç£ & „Ç≥„É≥„Éó„É©„Ç§„Ç¢„É≥„Çπ',
        items: ['SOC2Ê∫ñÊã†', 'GDPRÂØæÂøú', '„Çª„Ç≠„É•„É™„ÉÜ„Ç£Áõ£Êüª', '„Éá„Éº„ÇøÊöóÂè∑Âåñ', '„Ç¢„ÇØ„Çª„ÇπÂà∂Âæ°']
      },
      {
        category: '„Çµ„Éù„Éº„Éà & „Çµ„Éº„Éì„Çπ',
        items: ['Â∞ÇÁî®„Ç´„Çπ„Çø„Éû„Éº„Çµ„ÇØ„Çª„Çπ', '„Ç™„É≥„Çµ„Ç§„ÉàÁ†î‰øÆ', '24/7„Çµ„Éù„Éº„Éà', 'SLA‰øùË®º', '„Ç´„Çπ„Çø„É†ÈñãÁô∫']
      }
    ],
    useCases: [
      '50‰∫∫‰ª•‰∏ä„ÅÆÂ§ß‰ºÅÊ•≠',
      'Â§öÂõΩÁ±ç‰ºÅÊ•≠',
      'Ë¶èÂà∂Ê•≠ÁïåÔºàÈáëËûç„ÉªÂåªÁôÇÁ≠âÔºâ',
      '„Ç´„Çπ„Çø„É†Ë¶Å‰ª∂„ÅÆ„ÅÇ„ÇãÁµÑÁπî'
    ],
    support: 'Â∞ÇÁî®„Çµ„Éù„Éº„ÉàÔºà1ÊôÇÈñì‰ª•ÂÜÖËøî‰ø°Ôºâ+ 24/7ÈõªË©±„Çµ„Éù„Éº„Éà + Â∞ÇÂ±ûCSM'
  }
];

// ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„Éº„Éó„É©„É≥Ôºà„É¢„ÉÉ„ÇØÔºâ
const currentUserPlan = {
  planId: 'starter',
  memberCount: 3,
  nextBillingDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
  usage: {
    members: 3,
    teams: 1,
    reports: 2,
    storage: '0.3GB'
  }
};

// ÈÄöÁü•„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
interface NotificationProps {
  notification: NotificationState;
  onClose: () => void;
}

const Notification = ({ notification, onClose }: NotificationProps) => {
  useEffect(() => {
    if (notification.show) {
      const timer = setTimeout(() => {
        onClose();
      }, 3000);
      return () => clearTimeout(timer);
    }
    return undefined;
  }, [notification.show, onClose]);
  
  if (!notification.show) return null;

  const typeConfig = {
    success: { bg: 'bg-green-50', border: 'border-green-200', text: 'text-green-800', icon: '‚úÖ' },
    info: { bg: 'bg-blue-50', border: 'border-blue-200', text: 'text-blue-800', icon: '‚ÑπÔ∏è' },
    warning: { bg: 'bg-yellow-50', border: 'border-yellow-200', text: 'text-yellow-800', icon: '‚ö†Ô∏è' },
    error: { bg: 'bg-red-50', border: 'border-red-200', text: 'text-red-800', icon: '‚ùå' }
  };

  const config = typeConfig[notification.type];

  return (
    <div className="fixed top-4 right-4 z-50 animate-slide-in-right">
      <div className={`${config.bg} ${config.border} border rounded-lg p-4 shadow-lg max-w-md`}>
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <span className="text-lg">{config.icon}</span>
            <p className={`${config.text} font-medium`}>{notification.message}</p>
          </div>
          <button
            onClick={onClose}
            className={`${config.text} hover:opacity-70 transition-opacity`}
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
};

// „Éó„É©„É≥Ë©≥Á¥∞„É¢„Éº„ÉÄ„É´„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
interface PlanDetailModalProps {
  plan: Plan | null;
  isOpen: boolean;
  onClose: () => void;
  isYearly: boolean;
}

const PlanDetailModal = ({ plan, isOpen, onClose, isYearly }: PlanDetailModalProps) => {
  if (!isOpen || !plan) return null;

  const price = isYearly ? plan.yearlyPrice : plan.price;
  const monthlyPrice = isYearly ? Math.round(plan.yearlyPrice / 12) : plan.price;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto animate-slide-up">
        {/* „Éò„ÉÉ„ÉÄ„Éº */}
        <div className="sticky top-0 bg-white border-b border-gray-200 p-6 rounded-t-2xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="text-4xl">{plan.icon}</div>
              <div>
                <h2 className="text-2xl font-bold text-gray-900">{plan.name}„Éó„É©„É≥</h2>
                <p className="text-gray-600">{plan.description}</p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 transition-colors"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        <div className="p-6 space-y-8">
          {/* ‰æ°Ê†ºÊÉÖÂ†± */}
          <div className="bg-gray-50 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">ÊñôÈáë</h3>
            {plan.price === 0 ? (
              <div className="text-3xl font-bold text-gray-900">ÁÑ°Êñô</div>
            ) : (
              <div className="flex items-baseline space-x-2">
                <span className="text-3xl font-bold text-gray-900">
                  ¬•{monthlyPrice.toLocaleString()}
                </span>
                <span className="text-gray-600">/Êúà</span>
                {isYearly && (
                  <span className="text-sm text-green-600 font-medium">
                    ÔºàÂπ¥Èñì ¬•{price.toLocaleString()}Ôºâ
                  </span>
                )}
              </div>
            )}
          </div>

          {/* Âà∂ÈôêÊÉÖÂ†± */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">„Éó„É©„É≥Âà∂Èôê</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="bg-blue-50 rounded-lg p-4 text-center">
                <div className="text-2xl font-bold text-blue-600">
                  {plan.limits.members}{typeof plan.limits.members === 'number' ? '‰∫∫' : ''}
                </div>
                <div className="text-sm text-blue-800">„É°„É≥„Éê„Éº</div>
              </div>
              <div className="bg-green-50 rounded-lg p-4 text-center">
                <div className="text-2xl font-bold text-green-600">
                  {plan.limits.teams}{typeof plan.limits.teams === 'number' ? 'ÂÄã' : ''}
                </div>
                <div className="text-sm text-green-800">„ÉÅ„Éº„É†</div>
              </div>
              <div className="bg-purple-50 rounded-lg p-4 text-center">
                <div className="text-2xl font-bold text-purple-600">{plan.limits.reports}</div>
                <div className="text-sm text-purple-800">„É¨„Éù„Éº„Éà/Êúà</div>
              </div>
              <div className="bg-orange-50 rounded-lg p-4 text-center">
                <div className="text-2xl font-bold text-orange-600">{plan.limits.storage}</div>
                <div className="text-sm text-orange-800">„Çπ„Éà„É¨„Éº„Ç∏</div>
              </div>
            </div>
          </div>

          {/* Ë©≥Á¥∞Ê©üËÉΩ */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Ë©≥Á¥∞Ê©üËÉΩ</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {plan.detailedFeatures.map((category, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-4">
                  <h4 className="font-semibold text-gray-900 mb-3">{category.category}</h4>
                  <ul className="space-y-2">
                    {category.items.map((item, itemIndex) => (
                      <li key={itemIndex} className="flex items-center text-sm">
                        <svg className="w-4 h-4 text-green-500 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                        <span className="text-gray-700">{item}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          </div>

          {/* Âà©Áî®Áî®ÈÄî */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">„Åì„Çì„Å™ÁµÑÁπî„Å´„Åä„Åô„Åô„ÇÅ</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {plan.useCases.map((useCase, index) => (
                <div key={index} className="flex items-center bg-blue-50 rounded-lg p-3">
                  <svg className="w-5 h-5 text-blue-500 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span className="text-blue-800 font-medium">{useCase}</span>
                </div>
              ))}
            </div>
          </div>

          {/* „Çµ„Éù„Éº„Éà */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">„Çµ„Éù„Éº„ÉàÂÜÖÂÆπ</h3>
            <div className="bg-gray-50 rounded-lg p-4">
              <p className="text-gray-700">{plan.support}</p>
            </div>
          </div>
        </div>

        {/* „Éï„ÉÉ„Çø„Éº */}
        <div className="sticky bottom-0 bg-white border-t border-gray-200 p-6 rounded-b-2xl">
          <div className="flex justify-end space-x-4">
            <button
              onClick={onClose}
              className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg font-medium hover:bg-gray-50 transition-colors"
            >
              Èñâ„Åò„Çã
            </button>
            <button className="px-6 py-2 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors">
              {plan.price === 0 ? 'ÁÑ°Êñô„ÅßÂßã„ÇÅ„Çã' : `${plan.name}„ÇíÈÅ∏Êäû`}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// „Éó„É©„É≥„Ç´„Éº„Éâ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
interface PlanCardProps {
  plan: Plan;
  isCurrentPlan: boolean;
  isYearly: boolean;
  onSelectPlan: (planId: string) => void;
  onShowDetails: (plan: Plan) => void;
  index: number;
}

const PlanCard = ({ plan, isCurrentPlan, isYearly, onSelectPlan, onShowDetails, index }: PlanCardProps) => {
  const price = isYearly ? plan.yearlyPrice : plan.price;
  const monthlyPrice = isYearly ? Math.round(plan.yearlyPrice / 12) : plan.price;
  const savings = isYearly && plan.price > 0 ? Math.round(((plan.price * 12 - plan.yearlyPrice) / (plan.price * 12)) * 100) : 0;

  // ÁèæÂú®„ÅÆ„Éó„É©„É≥„Çà„Çä‰∏ä‰Ωç„Åã„Å©„ÅÜ„Åã„ÇíÂà§ÂÆö
  const currentPlanIndex = plans.findIndex(p => p.id === currentUserPlan.planId);
  const thisPlanIndex = plans.findIndex(p => p.id === plan.id);
  const isUpgrade = thisPlanIndex > currentPlanIndex;
  const isDowngrade = thisPlanIndex < currentPlanIndex && !isCurrentPlan;

  const colorConfig = {
    gray: {
      border: 'border-gray-200',
      bg: 'bg-gray-50',
      button: 'bg-gray-600 hover:bg-gray-700',
      text: 'text-gray-600',
      accent: 'text-gray-900'
    },
    blue: {
      border: 'border-blue-200',
      bg: 'bg-blue-50',
      button: 'bg-blue-600 hover:bg-blue-700',
      text: 'text-blue-600',
      accent: 'text-blue-900'
    },
    purple: {
      border: 'border-purple-200',
      bg: 'bg-purple-50',
      button: 'bg-purple-600 hover:bg-purple-700',
      text: 'text-purple-600',
      accent: 'text-purple-900'
    }
  };

  const config = colorConfig[plan.color as keyof typeof colorConfig];

  // „Éú„Çø„É≥„ÉÜ„Ç≠„Çπ„Éà„Å®„Çπ„Çø„Ç§„É´„ÇíÊ±∫ÂÆö
  const getButtonConfig = () => {
    if (isCurrentPlan) {
      return {
        text: 'ÁèæÂú®„ÅÆ„Éó„É©„É≥',
        className: 'w-full py-3 px-4 bg-green-100 text-green-700 rounded-lg font-medium cursor-not-allowed',
        disabled: true
      };
    }
    
    if (plan.price === 0) {
      return {
        text: 'ÁÑ°Êñô„ÅßÂßã„ÇÅ„Çã',
        className: `w-full py-3 px-4 text-white rounded-lg font-medium transition-all duration-200 transform hover:scale-105 ${config.button}`,
        disabled: false
      };
    }
    
    if (isUpgrade) {
      return {
        text: `${plan.name}„Å´„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ`,
        className: `w-full py-3 px-4 text-white rounded-lg font-medium transition-all duration-200 transform hover:scale-105 ${config.button}`,
        disabled: false
      };
    }
    
    if (isDowngrade) {
      return {
        text: `${plan.name}„Å´„ÉÄ„Ç¶„É≥„Ç∞„É¨„Éº„Éâ`,
        className: `w-full py-3 px-4 border-2 border-gray-300 text-gray-700 rounded-lg font-medium transition-all duration-200 hover:bg-gray-50`,
        disabled: false
      };
    }
    
    return {
      text: `${plan.name}„ÇíÈÅ∏Êäû`,
      className: `w-full py-3 px-4 text-white rounded-lg font-medium transition-all duration-200 transform hover:scale-105 ${config.button}`,
      disabled: false
    };
  };

  const buttonConfig = getButtonConfig();

  return (
    <div 
      className={`relative bg-white rounded-2xl shadow-lg border-2 transition-all duration-300 hover:shadow-xl hover:scale-105 animate-slide-up ${
        plan.popular ? 'border-blue-500 ring-4 ring-blue-100' : config.border
      } ${isCurrentPlan ? 'ring-4 ring-green-100 border-green-500' : ''}`}
      style={{ animationDelay: `${index * 0.1}s` }}
    >
      {/* ‰∫∫Ê∞ó„Éê„ÉÉ„Ç∏ */}
      {plan.popular && (
        <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
          <span className="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-4 py-1 rounded-full text-sm font-bold shadow-lg">
            üî• ÊúÄ„ÇÇ‰∫∫Ê∞ó
          </span>
        </div>
      )}

      {/* ÁèæÂú®„ÅÆ„Éó„É©„É≥„Éê„ÉÉ„Ç∏ */}
      {isCurrentPlan && (
        <div className="absolute -top-3 right-4">
          <span className="bg-green-500 text-white px-3 py-1 rounded-full text-sm font-bold shadow-lg">
            ‚úÖ ÁèæÂú®„ÅÆ„Éó„É©„É≥
          </span>
        </div>
      )}

      {/* „Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„ÉâÊé®Â•®„Éê„ÉÉ„Ç∏ */}
      {isUpgrade && plan.popular && (
        <div className="absolute -top-3 right-4">
          <span className="bg-orange-500 text-white px-3 py-1 rounded-full text-sm font-bold shadow-lg">
            üöÄ „Åä„Åô„Åô„ÇÅ
          </span>
        </div>
      )}

      <div className="p-8">
        {/* „Éò„ÉÉ„ÉÄ„Éº */}
        <div className="text-center mb-6">
          <div className="text-4xl mb-2">{plan.icon}</div>
          <h3 className="text-2xl font-bold text-gray-900 mb-2">{plan.name}</h3>
          <p className="text-gray-600">{plan.description}</p>
        </div>

        {/* ‰æ°Ê†º */}
        <div className="text-center mb-6">
          {plan.price === 0 ? (
            <div className="text-4xl font-bold text-gray-900">ÁÑ°Êñô</div>
          ) : (
            <div>
              <div className="flex items-center justify-center space-x-2">
                <span className="text-4xl font-bold text-gray-900">
                  ¬•{monthlyPrice.toLocaleString()}
                </span>
                <span className="text-gray-600">/Êúà</span>
              </div>
              {isYearly && savings > 0 && (
                <div className="mt-2">
                  <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium">
                    Âπ¥Êâï„ÅÑ„Åß{savings}%„ÅäÂæóÔºÅ
                  </span>
                </div>
              )}
              {isYearly && plan.price > 0 && (
                <div className="text-sm text-gray-500 mt-1">
                  Âπ¥Èñì ¬•{price.toLocaleString()}
                </div>
              )}
            </div>
          )}
        </div>

        {/* Âà∂ÈôêÊÉÖÂ†±ÔºàË¶ñË™çÊÄßÊîπÂñÑÔºâ */}
        <div className="mb-6 p-4 bg-blue-50 rounded-lg border border-blue-100">
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div className="flex justify-between">
              <span className="text-blue-700 font-medium">„É°„É≥„Éê„Éº:</span>
              <span className="font-bold text-blue-900">{plan.limits.members}{typeof plan.limits.members === 'number' ? '‰∫∫' : ''}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-blue-700 font-medium">„ÉÅ„Éº„É†:</span>
              <span className="font-bold text-blue-900">{plan.limits.teams}{typeof plan.limits.teams === 'number' ? 'ÂÄã' : ''}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-blue-700 font-medium">„É¨„Éù„Éº„Éà:</span>
              <span className="font-bold text-blue-900">{plan.limits.reports}/Êúà</span>
            </div>
            <div className="flex justify-between">
              <span className="text-blue-700 font-medium">„Çπ„Éà„É¨„Éº„Ç∏:</span>
              <span className="font-bold text-blue-900">{plan.limits.storage}</span>
            </div>
          </div>
        </div>

        {/* Ê©üËÉΩ‰∏ÄË¶ß */}
        <div className="mb-8">
          <h4 className="font-semibold text-gray-900 mb-3">Âê´„Åæ„Çå„ÇãÊ©üËÉΩ</h4>
          <ul className="space-y-2">
            {plan.features.map((feature, index) => (
              <li key={index} className="flex items-center text-sm">
                <svg className="w-4 h-4 text-green-500 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                <span className="text-gray-700">{feature}</span>
              </li>
            ))}
          </ul>
        </div>

        {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
        <div className="space-y-3">
          <button
            onClick={() => onSelectPlan(plan.id)}
            disabled={buttonConfig.disabled}
            className={buttonConfig.className}
          >
            {buttonConfig.text}
          </button>
          
          <button 
            onClick={() => onShowDetails(plan)}
            className="w-full py-2 px-4 border border-blue-300 text-blue-700 rounded-lg font-medium hover:bg-blue-50 transition-colors"
          >
            Ë©≥Á¥∞„ÇíË¶ã„Çã
          </button>
        </div>
      </div>
    </div>
  );
};

// ‰ΩøÁî®Áä∂Ê≥Å„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÔºàË¶ñË™çÊÄßÊîπÂñÑÔºâ
const UsageStats = () => {
  const currentPlan = plans.find(p => p.id === currentUserPlan.planId)!;
  
  const usagePercentages = {
    members: (currentUserPlan.usage.members / (currentPlan.limits.members as number)) * 100,
    teams: (currentUserPlan.usage.teams / (currentPlan.limits.teams as number)) * 100,
    reports: (currentUserPlan.usage.reports / currentPlan.limits.reports) * 100,
    storage: 30 // 0.3GB / 1GB = 30%
  };

  const getUsageColor = (percentage: number) => {
    if (percentage >= 90) return 'bg-red-500';
    if (percentage >= 70) return 'bg-yellow-500';
    return 'bg-green-500';
  };

  const getUsageTextColor = (percentage: number) => {
    if (percentage >= 90) return 'text-red-700';
    if (percentage >= 70) return 'text-yellow-700';
    return 'text-green-700';
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8 animate-slide-up">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">ÁèæÂú®„ÅÆ‰ΩøÁî®Áä∂Ê≥Å</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-blue-50 rounded-lg p-4 border border-blue-100">
          <div className="flex justify-between items-center mb-2">
                       <span className="text-sm font-bold text-blue-800">„É°„É≥„Éê„Éº</span>
            <span className="text-sm font-bold text-blue-900">
              {currentUserPlan.usage.members}/{currentPlan.limits.members}
            </span>
          </div>
          <div className="w-full bg-blue-200 rounded-full h-3">
            <div
              className={`h-3 rounded-full transition-all duration-500 ${getUsageColor(usagePercentages.members)}`}
              style={{ width: `${usagePercentages.members}%` }}
            ></div>
          </div>
          <div className={`text-xs font-medium mt-1 ${getUsageTextColor(usagePercentages.members)}`}>
            {Math.round(usagePercentages.members)}% ‰ΩøÁî®‰∏≠
          </div>
        </div>

        <div className="bg-green-50 rounded-lg p-4 border border-green-100">
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm font-bold text-green-800">„ÉÅ„Éº„É†</span>
            <span className="text-sm font-bold text-green-900">
              {currentUserPlan.usage.teams}/{currentPlan.limits.teams}
            </span>
          </div>
          <div className="w-full bg-green-200 rounded-full h-3">
            <div
              className={`h-3 rounded-full transition-all duration-500 ${getUsageColor(usagePercentages.teams)}`}
              style={{ width: `${usagePercentages.teams}%` }}
            ></div>
          </div>
          <div className={`text-xs font-medium mt-1 ${getUsageTextColor(usagePercentages.teams)}`}>
            {Math.round(usagePercentages.teams)}% ‰ΩøÁî®‰∏≠
          </div>
        </div>

        <div className="bg-purple-50 rounded-lg p-4 border border-purple-100">
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm font-bold text-purple-800">„É¨„Éù„Éº„Éà</span>
            <span className="text-sm font-bold text-purple-900">
              {currentUserPlan.usage.reports}/{currentPlan.limits.reports}
            </span>
          </div>
          <div className="w-full bg-purple-200 rounded-full h-3">
            <div
              className={`h-3 rounded-full transition-all duration-500 ${getUsageColor(usagePercentages.reports)}`}
              style={{ width: `${usagePercentages.reports}%` }}
            ></div>
          </div>
          <div className={`text-xs font-medium mt-1 ${getUsageTextColor(usagePercentages.reports)}`}>
            {Math.round(usagePercentages.reports)}% ‰ΩøÁî®‰∏≠
          </div>
        </div>

        <div className="bg-orange-50 rounded-lg p-4 border border-orange-100">
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm font-bold text-orange-800">„Çπ„Éà„É¨„Éº„Ç∏</span>
            <span className="text-sm font-bold text-orange-900">
              {currentUserPlan.usage.storage}/{currentPlan.limits.storage}
            </span>
          </div>
          <div className="w-full bg-orange-200 rounded-full h-3">
            <div
              className={`h-3 rounded-full transition-all duration-500 ${getUsageColor(usagePercentages.storage)}`}
              style={{ width: `${usagePercentages.storage}%` }}
            ></div>
          </div>
          <div className={`text-xs font-medium mt-1 ${getUsageTextColor(usagePercentages.storage)}`}>
            {Math.round(usagePercentages.storage)}% ‰ΩøÁî®‰∏≠
          </div>
        </div>
      </div>

      {/* „Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ‰øÉÈÄ≤„É°„ÉÉ„Çª„Éº„Ç∏ */}
      {Object.values(usagePercentages).some(p => p >= 70) && (
        <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
          <div className="flex items-center">
            <div className="text-yellow-600 text-lg mr-3">‚ö†Ô∏è</div>
            <div>
              <h4 className="text-yellow-800 font-medium">‰ΩøÁî®Èáè„Åå‰∏äÈôê„Å´Ëøë„Å•„ÅÑ„Å¶„ÅÑ„Åæ„Åô</h4>
              <p className="text-yellow-700 text-sm mt-1">
                „Çà„ÇäÂ§ö„Åè„ÅÆÊ©üËÉΩ„Å®„É™„ÇΩ„Éº„Çπ„ÇíÂà©Áî®„Åô„Çã„Åü„ÇÅ„Å´„ÄÅ„Éó„É©„É≥„ÅÆ„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ„Çí„ÅîÊ§úË®é„Åè„Å†„Åï„ÅÑ„ÄÇ
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// „É°„Ç§„É≥„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
export default function SubscriptionPage() {
  const { user } = useAuth();
  const [isYearly, setIsYearly] = useState(false);
  const [selectedPlanForDetails, setSelectedPlanForDetails] = useState<Plan | null>(null);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [notification, setNotification] = useState<NotificationState>({
    show: false,
    message: '',
    type: 'info'
  });

  const showNotification = (message: string, type: NotificationState['type'] = 'info') => {
    setNotification({
      show: true,
      message,
      type
    });
  };

  const closeNotification = () => {
    setNotification(prev => ({ ...prev, show: false }));
  };

  const handleSelectPlan = (planId: string) => {
    const selectedPlan = plans.find(p => p.id === planId);
    const currentPlanIndex = plans.findIndex(p => p.id === currentUserPlan.planId);
    const selectedPlanIndex = plans.findIndex(p => p.id === planId);
    
    if (selectedPlan?.price === 0) {
      showNotification('ÁÑ°Êñô„Éó„É©„É≥„Åß„ÅÆÂà©Áî®„ÇíÈñãÂßã„Åó„Åæ„Åô', 'success');
    } else if (selectedPlanIndex > currentPlanIndex) {
      showNotification(`${selectedPlan?.name}„Éó„É©„É≥„Å∏„ÅÆ„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ„ÇíÈñãÂßã„Åó„Åæ„Åô`, 'success');
    } else if (selectedPlanIndex < currentPlanIndex) {
      showNotification(`${selectedPlan?.name}„Éó„É©„É≥„Å∏„ÅÆ„ÉÄ„Ç¶„É≥„Ç∞„É¨„Éº„Éâ„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åó„Åü`, 'info');
    } else {
      showNotification(`${selectedPlan?.name}„Éó„É©„É≥„ÇíÈÅ∏Êäû„Åó„Åæ„Åó„Åü`, 'success');
    }
  };

  const handleShowDetails = (plan: Plan) => {
    setSelectedPlanForDetails(plan);
    setIsDetailModalOpen(true);
  };

  const handleCloseDetails = () => {
    setIsDetailModalOpen(false);
    setSelectedPlanForDetails(null);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      <div className="max-w-7xl mx-auto p-6 space-y-8 pb-16">
        {/* „Éò„ÉÉ„ÉÄ„Éº */}
        <div className="text-center py-12 animate-slide-down">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            „ÅÇ„Å™„Åü„ÅÆ„ÉÅ„Éº„É†„Å´ÊúÄÈÅ©„Å™„Éó„É©„É≥„ÇíÈÅ∏Êäû
          </h1>
          <p className="text-xl text-gray-600 mb-8">
            LinkSense„Åß„ÉÅ„Éº„É†„ÅÆÂÅ•ÂÖ®ÊÄß„ÇíÂêë‰∏ä„Åï„Åõ„ÄÅÁîüÁî£ÊÄß„ÇíÊúÄÂ§ßÂåñ„Åó„Åæ„Åó„Çá„ÅÜ
          </p>
          
          {/* Âπ¥Êâï„ÅÑ/ÊúàÊâï„ÅÑÂàá„ÇäÊõø„Åà */}
          <div className="flex items-center justify-center space-x-4 mb-8">
            <span className={`text-sm font-medium ${!isYearly ? 'text-gray-900' : 'text-gray-500'}`}>
              ÊúàÊâï„ÅÑ
            </span>
            <button
              onClick={() => setIsYearly(!isYearly)}
              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${
                isYearly ? 'bg-blue-600' : 'bg-gray-200'
              }`}
            >
              <span
                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                  isYearly ? 'translate-x-6' : 'translate-x-1'
                }`}
              />
            </button>
            <span className={`text-sm font-medium ${isYearly ? 'text-gray-900' : 'text-gray-500'}`}>
              Âπ¥Êâï„ÅÑ
            </span>
            {isYearly && (
              <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium animate-pulse">
                ÊúÄÂ§ß20%„ÅäÂæóÔºÅ
              </span>
            )}
          </div>
        </div>

        {/* ‰ΩøÁî®Áä∂Ê≥Å */}
        <UsageStats />

        {/* „Éó„É©„É≥„Ç´„Éº„Éâ */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12">
          {plans.map((plan, index) => (
            <PlanCard
              key={plan.id}
              plan={plan}
              isCurrentPlan={plan.id === currentUserPlan.planId}
              isYearly={isYearly}
              onSelectPlan={handleSelectPlan}
              onShowDetails={handleShowDetails}
              index={index}
            />
          ))}
        </div>

        {/* FAQ */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-8 animate-slide-up" style={{ animationDelay: '0.4s' }}>
          <h3 className="text-2xl font-bold text-gray-900 mb-6 text-center">„Çà„Åè„ÅÇ„ÇãË≥™Âïè</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-semibold text-gray-900 mb-2">„Éó„É©„É≥„ÅÆÂ§âÊõ¥„ÅØ„ÅÑ„Å§„Åß„ÇÇÂèØËÉΩ„Åß„Åô„ÅãÔºü</h4>
              <p className="text-gray-600 text-sm">„ÅØ„ÅÑ„ÄÅ„ÅÑ„Å§„Åß„ÇÇ„Éó„É©„É≥„ÅÆÂ§âÊõ¥„ÅåÂèØËÉΩ„Åß„Åô„ÄÇ„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ„ÅØÂç≥Â∫ß„Å´ÂèçÊò†„Åï„Çå„ÄÅ„ÉÄ„Ç¶„É≥„Ç∞„É¨„Éº„Éâ„ÅØÊ¨°„ÅÆË´ãÊ±Ç„Çµ„Ç§„ÇØ„É´„Åã„ÇâÈÅ©Áî®„Åï„Çå„Åæ„Åô„ÄÇ</p>
            </div>
            <div>
              <h4 className="font-semibold text-gray-900 mb-2">„Éá„Éº„Çø„ÅÆÁßªË°å„ÅØ„Å©„ÅÜ„Å™„Çä„Åæ„Åô„ÅãÔºü</h4>
              <p className="text-gray-600 text-sm">„Åô„Åπ„Å¶„ÅÆ„Éá„Éº„Çø„ÅØËá™ÂãïÁöÑ„Å´ÁßªË°å„Åï„Çå„Åæ„Åô„ÄÇ„Éó„É©„É≥Â§âÊõ¥„Å´„Çà„Çã„Éá„Éº„Çø„ÅÆÊêçÂ§±„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ</p>
            </div>
            <div>
              <h4 className="font-semibold text-gray-900 mb-2">14Êó•ÈñìÁÑ°Êñô„Éà„É©„Ç§„Ç¢„É´„Å´„Å§„ÅÑ„Å¶</h4>
              <p className="text-gray-600 text-sm">„ÇØ„É¨„Ç∏„ÉÉ„Éà„Ç´„Éº„ÉâÁôªÈå≤„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ14Êó•Èñì„ÅÆË©¶Áî®ÊúüÈñìÁµÇ‰∫ÜÂæå„ÄÅËá™ÂãïÁöÑ„Å´ÊúâÊñô„Éó„É©„É≥„Å´ÁßªË°å„Åó„ÄÅË™≤Èáë„ÅåÈñãÂßã„Åï„Çå„Åæ„Åô„ÄÇ</p>
            </div>
            <div>
              <h4 className="font-semibold text-gray-900 mb-2">„Çµ„Éù„Éº„Éà„ÅØ„Å©„ÅÆÁ®ãÂ∫¶Âèó„Åë„Çâ„Çå„Åæ„Åô„ÅãÔºü</h4>
              <p className="text-gray-600 text-sm">„Éó„É©„É≥„Å´Âøú„Åò„Å¶„ÄÅ„É°„Éº„É´„Çµ„Éù„Éº„Éà„ÇÑ„ÉÅ„É£„ÉÉ„Éà„Çµ„Éù„Éº„Éà„ÇíÊèê‰æõ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Ç®„É≥„Çø„Éº„Éó„É©„Ç§„Ç∫„Éó„É©„É≥„Åß„ÅØÂ∞ÇÁî®„Çµ„Éù„Éº„Éà„ÉÅ„Éº„É†„ÅåÂØæÂøú„Åó„Åæ„Åô„ÄÇ</p>
            </div>
          </div>
        </div>

        {/* CTA „Çª„ÇØ„Ç∑„Éß„É≥ */}
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-8 text-center text-white animate-slide-up" style={{ animationDelay: '0.5s' }}>
          <h3 className="text-2xl font-bold mb-4">„Åæ„Å†Ëø∑„Å£„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü</h3>
          <p className="text-blue-100 mb-6">
            14Êó•Èñì„ÅÆÁÑ°Êñô„Éà„É©„Ç§„Ç¢„É´„Åß„ÄÅLinkSense„ÅÆÂÖ®Ê©üËÉΩ„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ<br />
            ‚Äª„ÇØ„É¨„Ç∏„ÉÉ„Éà„Ç´„Éº„ÉâÁôªÈå≤„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ14Êó•Âæå„Å´Ëá™ÂãïÁöÑ„Å´Ë™≤Èáë„ÅåÈñãÂßã„Åï„Çå„Åæ„Åô„ÄÇ
          </p>
          <div className="flex justify-center">
            <button className="px-8 py-3 bg-white text-blue-600 rounded-lg font-medium hover:bg-gray-100 transition-colors">
              14Êó•ÈñìÁÑ°Êñô„Éà„É©„Ç§„Ç¢„É´ÈñãÂßã
            </button>
          </div>
          <p className="text-xs text-blue-200 mt-4">
            ‚ÄªÁÑ°Êñô„Éà„É©„Ç§„Ç¢„É´ÈñãÂßã„Å´„ÅØ„ÇØ„É¨„Ç∏„ÉÉ„Éà„Ç´„Éº„ÉâÊÉÖÂ†±„ÅÆÁôªÈå≤„ÅåÂøÖË¶Å„Åß„Åô
          </p>
        </div>

        <div className="h-8"></div>
      </div>

      {/* „Éó„É©„É≥Ë©≥Á¥∞„É¢„Éº„ÉÄ„É´ */}
      <PlanDetailModal
        plan={selectedPlanForDetails}
        isOpen={isDetailModalOpen}
        onClose={handleCloseDetails}
        isYearly={isYearly}
      />

      {/* ÈÄöÁü• */}
      <Notification
        notification={notification}
        onClose={closeNotification}
      />
    </div>
  );
}
 